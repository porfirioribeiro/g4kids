// Generated by CoffeeScript 1.3.3
var $arg, $prop, $sender, $signal, $slot, el, g4, _i, _len, _ref,
  __slice = [].slice;

Array.toArray = function(ob) {
  if (ob instanceof Array) {
    return ob;
  }
  if (ob === null || ob === void 0) {
    return [];
  }
  if (arguments.length > 1) {
    return Array.prototype.slice.call(arguments);
  }
  if (typeof ob === "string") {
    return [ob];
  }
  return Array.prototype.slice.call(ob);
};

g4 = {};

g4.global = typeof window !== "undefined" && window !== null ? window : this;

g4.global.g4 = g4;

g4.moduleRootPath = null;

g4.modules = {};

g4.modulesRequired = {};

g4.modulesToLoad = 0;

g4.module_ = function(m) {
  var modName, _i, _len, _ref;
  if (typeof m !== "object" || typeof m.name !== "string" || typeof m.defines !== "function") {
    throw "Bad module initialization";
  }
  if (this.modules[m.name]) {
    throw "Already defined a module with the name: " + m.name;
  }
  this.modules[m.name] = m;
  m.loaded = false;
  if (m.requires instanceof Array) {
    _ref = m.requires;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      modName = _ref[_i];
      if (!this.modules[modName] && !this.modulesRequired[modName]) {
        this.modulesRequired[modName] = true;
        this._loadModule(modName);
      }
    }
  }
  if (this.modulesToLoad === 0) {
    return this._tryModules();
  }
};

g4.lastModule = null;

g4.module = function(name) {
  if (g4.lastModule) {
    throw new Error("Module: " + g4.lastModule.name + " defines nothing!");
  }
  if (this.modules[name]) {
    throw new Error("Module: Already defined a module with the name: " + name);
  }
  g4.lastModule = {
    name: name,
    loaded: false
  };
  return this;
};

g4.mod = function(name) {
  return this.modules[name] = {
    name: name,
    loaded: true
  };
};

g4.requires = function(req) {
  if (!g4.lastModule) {
    throw new Error("g4.Module: calling g4.requires without any module");
  }
  req = Array.toArray.apply(null, arguments);
  if (!(g4.lastModule.requires instanceof Array)) {
    g4.lastModule.requires = req;
  } else {
    Array.prototype.push.apply(g4.lastModule.requires, req);
  }
  return this;
};

g4.defines = function(fn) {
  var modName, _i, _len, _ref;
  if (!g4.lastModule) {
    throw new Error("g4.Module: calling g4.defines without any module");
  }
  g4.lastModule.defines = fn;
  this.modules[g4.lastModule.name] = g4.lastModule;
  if (g4.lastModule.requires instanceof Array) {
    _ref = g4.lastModule.requires;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      modName = _ref[_i];
      if (!this.modules[modName] && !this.modulesRequired[modName]) {
        this.modulesRequired[modName] = true;
        this._loadModule(modName);
      }
    }
  }
  if (this.modulesToLoad === 0) {
    this._tryModules();
  }
  g4.lastModule = null;
  return this;
};

_ref = document.getElementsByTagName("script");
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  el = _ref[_i];
  if (el.src.match(/g4\.js/)) {
    g4.moduleRootPath = el.src.replace(location.origin, "").replace(/g4\.js/, "");
    break;
  }
}

g4.modulePaths = {
  __base: g4.moduleRootPath
};

g4.addModulePath = function(prefix, path, relative) {
  if (relative == null) {
    relative = false;
  }
  return this.modulePaths[prefix] = relative ? this.moduleRootPath + "/" + path : path;
};

g4._loadModule = function(modName) {
  var file, mod, modns, ns, rootPath, script,
    _this = this;
  this.modulesToLoad++;
  rootPath = this.moduleRootPath;
  mod = rootPath + modName;
  modns = modName.split(".");
  if (modns.length > 1) {
    ns = modns[0];
    if (typeof g4.modulePaths[ns] === "string") {
      mod = g4.modulePaths[ns] + modName.replace(ns + ".", "");
    }
  }
  file = mod.replace(/\./g, "/") + ".js";
  script = document.createElement("script");
  script.onload = function() {
    if (--_this.modulesToLoad === 0) {
      return _this._tryModules();
    }
  };
  script.onerror = function() {
    throw new Error("Could not load the module with name: " + modName + "! File not found: " + file);
  };
  script.src = file;
  document.getElementsByTagName("head")[0].appendChild(script);
  return script;
};

g4._tryModules = function() {
  var mod, name, _ref1;
  _ref1 = this.modules;
  for (name in _ref1) {
    mod = _ref1[name];
    if (!mod.loaded) {
      this._doModule(mod);
    }
  }
};

g4._doModule = function(mod) {
  var modName, _j, _len1, _ref1;
  if (mod.loaded || mod.loading) {
    return;
  }
  mod.loading = true;
  if (mod.requires instanceof Array) {
    _ref1 = mod.requires;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      modName = _ref1[_j];
      this._doModule(this.modules[modName]);
    }
  }
  if (typeof mod.defines === "function") {
    mod.defines.call(this.global);
  }
  mod.loading = false;
  mod.loaded = true;
};

/*
Base of all g4 objects that can be constructed using a object literal
+ g4.Object
*/


g4.Object = (function() {

  g4$Object.className = 'g4.Object';

  function g4$Object(o) {
    var k, v;
    if (typeof o === "object") {
      for (k in o) {
        v = o[k];
        this[k] = v;
      }
    }
    if (typeof this.init === "function") {
      this.init();
    }
  }

  g4$Object.prototype.init = function() {};

  return g4$Object;

})();

/*
Little type utility
+ g4.Type
*/


g4.mod("g4.Type");

g4.Type = (function() {

  g4$Type.className = 'g4.Type';

  function g4$Type() {}

  g4$Type.info = function(object_or_class) {
    if (typeof object_or_class === "function") {
      return object_or_class.name;
    } else if (typeof object_or_class === "object" && object_or_class) {
      return "[object " + object_or_class.constructor.name + "]";
    }
    return "" + Object.prototype.toString.call(object_or_class);
  };

  g4$Type.getClass = function(object_or_class) {
    if (typeof object_or_class === "function") {
      if (typeof object_or_class.className === "string") {
        return object_or_class.className;
      } else {
        return object_or_class.name;
      }
    }
    if (typeof object_or_class === "undefined") {
      return "undefined";
    } else {
      if (object_or_class) {
        if (typeof object_or_class.constructor.className === "string") {
          return object_or_class.constructor.className;
        } else {
          return object_or_class.constructor.name;
        }
      } else {
        return "null";
      }
    }
  };

  g4$Type.check = function() {
    var fnName, i, matchs, obj, objs, r, s_objs, s_types, type, types, _j, _len1;
    fnName = arguments[0], objs = arguments[1], types = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    objs = Array.prototype.slice.call(objs, 0);
    matchs = [];
    i = 0;
    for (_j = 0, _len1 = types.length; _j < _len1; _j++) {
      type = types[_j];
      obj = objs[i++];
      r = (type === Object && typeof obj === "object") || (type === String && typeof obj === "string") || (type === Number && typeof obj === "number") || (type === Boolean && typeof obj === "boolean") || (type === Function && typeof obj === "function") || (obj instanceof type);
      matchs[i] = r;
    }
    if (!r) {
      s_types = types.map(g4.Type.getClass).join(",");
      s_objs = objs.map(g4.Type.getClass).join(",");
      return new TypeError("No matching function for call to: " + fnName + "(" + s_objs + "), expected: " + fnName + "(" + s_types + ")");
    }
    return false;
  };

  return g4$Type;

})();

/*
Special string concatenation
* $arg
*/


$arg = function() {
  var args, i, s, string;
  string = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (typeof string !== "string") {
    string = string && string.toString ? string.toString() : "";
  }
  i = 0;
  s = string.replace(/%%|%(\w?)/g, function(match, ref) {
    var arg;
    arg = args[i++];
    if (match === "%%") {
      return "%";
    }
    if (ref !== "" && typeof $arg.fn[ref] === "function") {
      return $arg.fn[ref](arg);
    }
    return "" + arg;
  });
  return s;
};

$arg.fn = {
  t: g4.Type.info,
  c: g4.Type.getClass
};

String.prototype.arg = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  args.unshift(this);
  return $arg.apply(null, args);
};

/*
Signal-slot library
+ g4.Signal
* $signal
* $sender
* $prop
* $slot
*/


$sender = null;

$prop = function(object, property) {
  return {
    object: object,
    property: property
  };
};

$slot = function(object, slot) {
  return {
    object: object,
    slot: slot
  };
};

$signal = function(owner) {
  return new g4.Signal(owner);
};

g4.mod("g4.Signal");

g4.Signal = (function() {
  var disconnectAll, usages;

  g4$Signal.className = 'g4.Signal';

  g4$Signal.prototype.slots = [];

  g4$Signal.prototype.isEmitting = false;

  g4$Signal.prototype.owner = null;

  function g4$Signal(owner) {
    this.owner = owner;
  }

  g4$Signal.prototype.toSlotObject = function(slot) {
    var slotObject, _ref1;
    if (slot instanceof g4.Signal || typeof slot === "function") {
      slotObject = {
        slot: slot
      };
    } else if (typeof slot === "object") {
      slotObject = slot;
    } else {
      throw new Error("g4.Signal: Wrong argument, expected function, g4.Signal or object" + usages);
    }
    if ((_ref1 = slotObject.object) == null) {
      slotObject.object = g4.global;
    }
    if (typeof slotObject.slot === "string") {
      slotObject.slot = slotObject.object[slotObject.slot];
    }
    if (typeof slotObject.property !== "string" && typeof slotObject.slot !== "function" && !(slotObject.slot instanceof g4.Signal)) {
      throw new Error("g4.Signal: Incorrect parameters" + usages);
    }
    return slotObject;
  };

  g4$Signal.prototype.connect = function() {
    var args, slot, slotObject;
    slot = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    slotObject = this.toSlotObject(slot);
    if (!(slotObject.args instanceof Array)) {
      slotObject.args = args;
    }
    this.slots.push(slotObject);
    return slotObject;
  };

  g4$Signal.prototype.disconnect = function(slot) {
    var idx, nslots, s1, s2, _j, _len1;
    s1 = this.toSlotObject(slot);
    console.log("disconnect: ", s1);
    nslots = this.slots.slice(0);
    for (idx = _j = 0, _len1 = nslots.length; _j < _len1; idx = ++_j) {
      s2 = nslots[idx];
      if (s1 === s2 || (s1.slot === s2.slot && s1.object === s2.object && s1.property === s2.property)) {
        this.slots.splice(idx, 1);
      }
    }
  };

  disconnectAll = function() {
    this.slots = [];
  };

  g4$Signal.prototype.emit = function() {
    var args, nargs, slotObject, _j, _len1, _ref1;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.isEmitting) {
      return;
    }
    this.isEmitting = true;
    _ref1 = this.slots;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      slotObject = _ref1[_j];
      $sender = this.owner;
      nargs = args.slice(0);
      Array.prototype.unshift.apply(nargs, slotObject.args);
      if (slotObject.slot && !slotObject.slot.isEmitting) {
        slotObject.slot.apply(slotObject.object, nargs);
      } else if (slotObject.slot instanceof g4.Signal) {
        slotObject.slot.emit.apply(slotObject.slot, nargs);
      } else if (slotObject.property) {
        slotObject.object[slotObject.property] = nargs[0];
      }
      $sender = null;
    }
    this.isEmitting = false;
  };

  usages = ", usages are:\n$signal#connect($prop object, propertyName)\n$signal#connect($slot object, name)\n$signal#connect($slot object, function_signal)\n$signal#connect({object:object, slot:name}) where object[name] is a function or signal\n$signal#connect({object:object, slot:function_signal})\n$signal#connect(function_signal) can be slot,signal,...";

  return g4$Signal;

})();
