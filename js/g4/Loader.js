// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

g4.module("g4.Loader");

g4.defines(function() {
  var loader;
  g4.Loader = (function() {

    g4$Loader.className = 'g4.Loader';

    g4$Loader.status = {
      IDLE: "IDLE",
      LOADED: "LOADED",
      LOADING: "LOADING",
      ERROR: "ERROR",
      TIMEOUT: "TIMEOUT"
    };

    g4$Loader.currentLoader = null;

    g4$Loader.prototype.status = null;

    g4$Loader.prototype.loadList = null;

    g4$Loader.prototype.resources = null;

    g4$Loader.prototype.nResources = 0;

    g4$Loader.prototype.started = false;

    g4$Loader.prototype.loadTimeout = 5000;

    function g4$Loader() {
      this.status = g4.Loader.status.IDLE;
      this.loadList = [];
      this.resources = {};
      this.nResources = 0;
    }

    g4$Loader.prototype.load = function(pluginName, name, src) {
      var plugin, pluginClass;
      pluginClass = g4.Loader[pluginName];
      if (!pluginClass) {
        throw new Error("On g4.Loader#load: The plugin named " + pluginName + " is nor register in g4.Loader");
      }
      plugin = new pluginClass(this, name, src);
      if (this.started) {
        plugin.start();
      }
      this.loadList.push(plugin);
      return plugin;
    };

    g4$Loader.prototype.loadFromObject = function(o) {
      var e, name, oo, pluginName, src;
      if ((e = g4.Type.check("g4.Loader#loadFromObject", arguments, Object))) {
        throw e;
      }
      for (pluginName in o) {
        oo = o[pluginName];
        if (!g4.Loader[pluginName]) {
          throw new Error("On g4.Loader#loadFromObject: The plugin named " + pluginName + " is nor register in g4.Loader");
        }
        if (typeof o[pluginName] !== "object") {
          throw new Error("On ResLoader.loadFromObject: Mallformed object");
        }
        for (name in oo) {
          src = oo[name];
          this.load(pluginName, name, src);
        }
      }
    };

    g4$Loader.prototype.start = function() {
      this.status = g4.Loader.status.LOADING;
      g4.Loader.currentLoader = this;
      this.loadList.forEach(function(res) {
        return res.start();
      });
      this.started = true;
      g4.Loader.currentLoader = null;
    };

    g4$Loader.prototype.onResourceLoad = function(loader, status) {
      this.nResources++;
      this.resources[loader.name] = loader.resource;
      if (status === g4.Loader.status.ERROR || status === g4.Loader.status.TIMEOUT) {
        this.status = status;
        this.onError();
      }
      if (this.nResources === this.loadList.length) {
        this.status = g4.Loader.status.LOADED;
        return this.onLoad();
      }
    };

    g4$Loader.prototype.onError = function() {
      return console.error("Huston, we got a problem!");
    };

    g4$Loader.prototype.onLoad = function() {
      return console.log("All your resources are belong to us! I mean, loaded!");
    };

    return g4$Loader;

  })();
  g4.Loader.Base = (function() {
    var _timeout;

    g4$Loader$Base.className = 'g4.Loader.Base';

    g4$Loader$Base.prototype.loader = null;

    g4$Loader$Base.prototype.name = "";

    g4$Loader$Base.prototype.src = "";

    g4$Loader$Base.prototype.resource = null;

    g4$Loader$Base.prototype.status = g4.Loader.status.IDLE;

    _timeout = null;

    function g4$Loader$Base(loader, name, src) {
      this.loader = loader;
      this.name = name;
      this.src = src;
    }

    g4$Loader$Base.prototype.start = function() {
      this.status = g4.Loader.status.LOADING;
      this._timeout = setTimeout(this.finish.bind(this, g4.Loader.status.TIMEOUT), this.loader.loadTimeout);
    };

    g4$Loader$Base.prototype.finish = function(status) {
      this.loader.onResourceLoad(this, status);
      clearTimeout(this._timeout);
    };

    g4$Loader$Base.prototype.toString = function() {
      return "" + this.constructor.className + "(name: '" + this.name + "', src: '" + this.src + "')";
    };

    return g4$Loader$Base;

  })();
  g4.Loader.Image = (function(_super) {

    __extends(g4$Loader$Image, _super);

    g4$Loader$Image.className = 'g4.Loader.Image';

    function g4$Loader$Image() {
      return g4$Loader$Image.__super__.constructor.apply(this, arguments);
    }

    g4$Loader$Image.prototype.start = function() {
      g4$Loader$Image.__super__.start.apply(this, arguments);
      this.resource = new Image();
      this.resource.onload = this.finish.bind(this, g4.Loader.status.LOADED);
      this.resource.onerror = this.finish.bind(this, g4.Loader.status.ERROR);
      return this.resource.src = this.src;
    };

    return g4$Loader$Image;

  })(g4.Loader.Base);
  g4.Loader.Script = (function(_super) {

    __extends(g4$Loader$Script, _super);

    g4$Loader$Script.className = 'g4.Loader.Script';

    function g4$Loader$Script() {
      return g4$Loader$Script.__super__.constructor.apply(this, arguments);
    }

    g4$Loader$Script.prototype.start = function() {
      return g4$Loader$Script.__super__.start.apply(this, arguments);
    };

    return g4$Loader$Script;

  })(g4.Loader.Base);
  g4.Loader.Text = (function(_super) {

    __extends(g4$Loader$Text, _super);

    g4$Loader$Text.className = 'g4.Loader.Text';

    function g4$Loader$Text() {
      this.onreadystatechange = this.onreadystatechange.bind(this);
      return g4$Loader$Text.__super__.constructor.apply(this, arguments);
    }

    g4$Loader$Text.prototype.httpRequest = null;

    g4$Loader$Text.prototype.start = function() {
      g4$Loader$Text.__super__.start.apply(this, arguments);
      this.httpRequest = new XMLHttpRequest();
      this.httpRequest.onreadystatechange = this.onreadystatechange;
      this.httpRequest.open("GET", this.src);
      this.httpRequest.send();
    };

    g4$Loader$Text.prototype.onreadystatechange = function() {
      if (this.httpRequest.readyState === 4) {
        this.resource = this.httpRequest.responseText;
        this.finish(this.httpRequest.status === 200 ? g4.Loader.status.LOADED : g4.Loader.status.ERROR);
      }
    };

    return g4$Loader$Text;

  })(g4.Loader.Base);
  g4.Loader.JSON = (function(_super) {

    __extends(g4$Loader$JSON, _super);

    g4$Loader$JSON.className = 'g4.Loader.JSON';

    function g4$Loader$JSON() {
      return g4$Loader$JSON.__super__.constructor.apply(this, arguments);
    }

    g4$Loader$JSON.prototype.finish = function(status) {
      if (status === g4.Loader.status.LOADED) {
        this.resource = JSON.parse(this.resource);
      }
      return g4$Loader$JSON.__super__.finish.call(this, status);
    };

    return g4$Loader$JSON;

  })(g4.Loader.Text);
  g4.Loader.List = (function(_super) {

    __extends(g4$Loader$List, _super);

    g4$Loader$List.className = 'g4.Loader.List';

    function g4$Loader$List() {
      return g4$Loader$List.__super__.constructor.apply(this, arguments);
    }

    g4$Loader$List.prototype.finish = function(status) {
      if (status === g4.Loader.status.LOADED) {
        this.loader.loadFromObject(JSON.parse(this.resource));
        this.resource = null;
      }
      return g4$Loader$List.__super__.finish.call(this, status);
    };

    return g4$Loader$List;

  })(g4.Loader.Text);
  loader = new g4.Loader();
  loader.load("List", "_res", "res/res.json");
  return loader.start();
});
